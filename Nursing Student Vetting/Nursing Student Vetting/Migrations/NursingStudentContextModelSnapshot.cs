// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Nursing_Student_Vetting.Migrations
{
    [DbContext(typeof(NursingStudentContext))]
    partial class NursingStudentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Class", b =>
                {
                    b.Property<int>("ClassID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("CategoryPrefix")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.HasKey("ClassID", "CategoryPrefix");

                    b.HasIndex("CategoryPrefix");

                    b.ToTable("Classes");

                    b.HasData(
                        new
                        {
                            ClassID = 2010,
                            CategoryPrefix = "BIOL",
                            ClassName = "Human Anatomy and Physiology I",
                            CreditHours = 3,
                            IsRequired = true
                        },
                        new
                        {
                            ClassID = 1010,
                            CategoryPrefix = "ACCT",
                            ClassName = "Principles of Accounting I",
                            CreditHours = 3,
                            IsRequired = false
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.ClassCategories", b =>
                {
                    b.Property<string>("CategoryPrefix")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryPrefix");

                    b.ToTable("ClassCategories");

                    b.HasData(
                        new
                        {
                            CategoryPrefix = "ACCT",
                            CategoryName = "Accounting"
                        },
                        new
                        {
                            CategoryPrefix = "AGRI",
                            CategoryName = "Agriculture"
                        },
                        new
                        {
                            CategoryPrefix = "AGRM",
                            CategoryName = "Agriculture"
                        },
                        new
                        {
                            CategoryPrefix = "ANTH",
                            CategoryName = "Anthropology"
                        },
                        new
                        {
                            CategoryPrefix = "ART",
                            CategoryName = "Art"
                        },
                        new
                        {
                            CategoryPrefix = "ARTP",
                            CategoryName = "Art Performance"
                        },
                        new
                        {
                            CategoryPrefix = "ASTR",
                            CategoryName = "Astronomy"
                        },
                        new
                        {
                            CategoryPrefix = "BIOL",
                            CategoryName = "Biology"
                        },
                        new
                        {
                            CategoryPrefix = "BUSN",
                            CategoryName = "Business"
                        },
                        new
                        {
                            CategoryPrefix = "CHEM",
                            CategoryName = "Chemistry"
                        },
                        new
                        {
                            CategoryPrefix = "COMM",
                            CategoryName = "Communications"
                        },
                        new
                        {
                            CategoryPrefix = "CITC",
                            CategoryName = "Computer Info Tech"
                        },
                        new
                        {
                            CategoryPrefix = "CISP",
                            CategoryName = "Computer Science"
                        },
                        new
                        {
                            CategoryPrefix = "CRMJ",
                            CategoryName = "Criminal Justice"
                        },
                        new
                        {
                            CategoryPrefix = "CULA",
                            CategoryName = "Culinary Arts"
                        },
                        new
                        {
                            CategoryPrefix = "DIGM",
                            CategoryName = "Digital Media"
                        },
                        new
                        {
                            CategoryPrefix = "ECED",
                            CategoryName = "Early Childhood Education"
                        },
                        new
                        {
                            CategoryPrefix = "ECON",
                            CategoryName = "Economics"
                        },
                        new
                        {
                            CategoryPrefix = "EDUC",
                            CategoryName = "Education"
                        },
                        new
                        {
                            CategoryPrefix = "EETC",
                            CategoryName = "Electrical Engin Tech"
                        },
                        new
                        {
                            CategoryPrefix = "EMSP",
                            CategoryName = "Emergency Med Serv Para"
                        },
                        new
                        {
                            CategoryPrefix = "EMSA",
                            CategoryName = "Emergency Med Service"
                        },
                        new
                        {
                            CategoryPrefix = "EMSB",
                            CategoryName = "Emergency Med Service"
                        },
                        new
                        {
                            CategoryPrefix = "ENGR",
                            CategoryName = "Engineering"
                        },
                        new
                        {
                            CategoryPrefix = "ENST",
                            CategoryName = "Engineering Systems Tech"
                        },
                        new
                        {
                            CategoryPrefix = "EGRT",
                            CategoryName = "Engineering Technology"
                        },
                        new
                        {
                            CategoryPrefix = "ENGL",
                            CategoryName = "English"
                        },
                        new
                        {
                            CategoryPrefix = "FIRE",
                            CategoryName = "Fire Science"
                        },
                        new
                        {
                            CategoryPrefix = "FREN",
                            CategoryName = "French"
                        },
                        new
                        {
                            CategoryPrefix = "GEOG",
                            CategoryName = "Geography"
                        },
                        new
                        {
                            CategoryPrefix = "GEOL",
                            CategoryName = "Geology"
                        },
                        new
                        {
                            CategoryPrefix = "HLTH",
                            CategoryName = "Health"
                        },
                        new
                        {
                            CategoryPrefix = "HIMT",
                            CategoryName = "Health Information Management"
                        },
                        new
                        {
                            CategoryPrefix = "HIST",
                            CategoryName = "History"
                        },
                        new
                        {
                            CategoryPrefix = "HGMT",
                            CategoryName = "Hospitality Management"
                        },
                        new
                        {
                            CategoryPrefix = "HUM",
                            CategoryName = "Humanities"
                        },
                        new
                        {
                            CategoryPrefix = "INFS",
                            CategoryName = "Information Systems"
                        },
                        new
                        {
                            CategoryPrefix = "MATH",
                            CategoryName = "Mathematics"
                        },
                        new
                        {
                            CategoryPrefix = "MUS",
                            CategoryName = "Music"
                        },
                        new
                        {
                            CategoryPrefix = "NRSG",
                            CategoryName = "Nursing"
                        },
                        new
                        {
                            CategoryPrefix = "OTAP",
                            CategoryName = "Occupational Thrpy Asst"
                        },
                        new
                        {
                            CategoryPrefix = "LEGL",
                            CategoryName = "Paralegal"
                        },
                        new
                        {
                            CategoryPrefix = "PHRX",
                            CategoryName = "Pharmacy Technician"
                        },
                        new
                        {
                            CategoryPrefix = "PHIL",
                            CategoryName = "Philosophy"
                        },
                        new
                        {
                            CategoryPrefix = "PHED",
                            CategoryName = "Physical Education"
                        },
                        new
                        {
                            CategoryPrefix = "PSCI",
                            CategoryName = "Physical Science"
                        },
                        new
                        {
                            CategoryPrefix = "PTAT",
                            CategoryName = "Physical Therapist Asst"
                        },
                        new
                        {
                            CategoryPrefix = "PHYS",
                            CategoryName = "Physics"
                        },
                        new
                        {
                            CategoryPrefix = "POLS",
                            CategoryName = "Political Science"
                        },
                        new
                        {
                            CategoryPrefix = "PSYC",
                            CategoryName = "Psychology"
                        },
                        new
                        {
                            CategoryPrefix = "READ",
                            CategoryName = "Reading"
                        },
                        new
                        {
                            CategoryPrefix = "RELS",
                            CategoryName = "Religion"
                        },
                        new
                        {
                            CategoryPrefix = "RESP",
                            CategoryName = "Respiratory Care"
                        },
                        new
                        {
                            CategoryPrefix = "SWRK",
                            CategoryName = "Social Work"
                        },
                        new
                        {
                            CategoryPrefix = "SOCI",
                            CategoryName = "Sociology"
                        },
                        new
                        {
                            CategoryPrefix = "SPAN",
                            CategoryName = "Spanish"
                        },
                        new
                        {
                            CategoryPrefix = "SPED",
                            CategoryName = "Special Education"
                        },
                        new
                        {
                            CategoryPrefix = "SURG",
                            CategoryName = "Surgical Technology"
                        },
                        new
                        {
                            CategoryPrefix = "THEA",
                            CategoryName = "Theatre"
                        },
                        new
                        {
                            CategoryPrefix = "WGST",
                            CategoryName = "Women/Gender Studies"
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Student", b =>
                {
                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EvaluationScore")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StudentID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentID = "W00001001",
                            Address = "123 Example St",
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            EvaluationScore = 0,
                            FirstName = "John",
                            Gender = "Male",
                            GraduationDate = new DateTime(2024, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Doe",
                            StartDate = new DateTime(2020, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            StudentID = "W00001002",
                            Address = "456 Example Ave",
                            DateOfBirth = new DateTime(1999, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            EvaluationScore = 0,
                            FirstName = "Jane",
                            Gender = "Female",
                            LastName = "Smith",
                            StartDate = new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.StudentClass", b =>
                {
                    b.Property<int>("ClassID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("CategoryPrefix")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<string>("LetterGrade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassID", "CategoryPrefix", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentClasses");

                    b.HasData(
                        new
                        {
                            ClassID = 2010,
                            CategoryPrefix = "BIOL",
                            StudentID = "W00001001",
                            LetterGrade = "B"
                        },
                        new
                        {
                            ClassID = 1010,
                            CategoryPrefix = "ACCT",
                            StudentID = "W00001002",
                            LetterGrade = "A"
                        },
                        new
                        {
                            ClassID = 2010,
                            CategoryPrefix = "BIOL",
                            StudentID = "W00001002",
                            LetterGrade = "C"
                        },
                        new
                        {
                            ClassID = 1010,
                            CategoryPrefix = "ACCT",
                            StudentID = "W00001001",
                            LetterGrade = "A"
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.StudentTest", b =>
                {
                    b.Property<int>("TestID")
                        .HasColumnType("int");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("int");

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("TestID", "AttemptNumber", "StudentID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentTests");

                    b.HasData(
                        new
                        {
                            TestID = 1,
                            AttemptNumber = 1,
                            StudentID = "W00001001",
                            Score = 22
                        },
                        new
                        {
                            TestID = 2,
                            AttemptNumber = 1,
                            StudentID = "W00001001",
                            Score = 74
                        },
                        new
                        {
                            TestID = 2,
                            AttemptNumber = 2,
                            StudentID = "W00001002",
                            Score = 94
                        },
                        new
                        {
                            TestID = 2,
                            AttemptNumber = 1,
                            StudentID = "W00001002",
                            Score = 92
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestID"));

                    b.Property<int>("GradingScale")
                        .HasColumnType("int");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestID");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            TestID = 1,
                            GradingScale = 36,
                            TestName = "ACT"
                        },
                        new
                        {
                            TestID = 2,
                            GradingScale = 100,
                            TestName = "Designated Test"
                        });
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Class", b =>
                {
                    b.HasOne("Nursing_Student_Vetting.Models.ClassCategories", "Category")
                        .WithMany("Classes")
                        .HasForeignKey("CategoryPrefix")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.StudentClass", b =>
                {
                    b.HasOne("Nursing_Student_Vetting.Models.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nursing_Student_Vetting.Models.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassID", "CategoryPrefix")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.StudentTest", b =>
                {
                    b.HasOne("Nursing_Student_Vetting.Models.Student", "Student")
                        .WithMany("StudentTests")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nursing_Student_Vetting.Models.Test", "Test")
                        .WithMany("StudentTests")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Class", b =>
                {
                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.ClassCategories", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Student", b =>
                {
                    b.Navigation("StudentClasses");

                    b.Navigation("StudentTests");
                });

            modelBuilder.Entity("Nursing_Student_Vetting.Models.Test", b =>
                {
                    b.Navigation("StudentTests");
                });
#pragma warning restore 612, 618
        }
    }
}
